== URM ToDos (by Topic):

URM Usability Reporting Manager
Copyright (C) 2012 internettechnik 
Licensed under the GNU GPLv3 (http://www.gnu.org/licenses/gpl.txt) license.


== Overall Functionality

* add section to support preparation of usability evaluations
	create section for TA-Planning. 
	including: print consent form, orientation script, questionnaire... 
	and event-codes, default interview questions,... 
	and heuristics (e.g. 10 heuristics by nielsen),...
	also the attributes to ask user in background formular
* findings of HE: allow to specify finding per heexpert 
	with severity and reference to heuristic 
* add git integration to view source-code
* add (input of) references to source-code
* add buttons to upload forms on the "proper time in the workflow"
	e.g. after adding an author: button to "add signed consent form"


== Naming

* Positive Finding versus Negative Finding with Recommendation
* edit hints and titles to match wording of keith
* add German translations


== I18N

* add translation for German

== Input via Web-GUI

* add Field for Recommendation for every Negative Finding
* add survey-like question types (with answers, with mapping to given scale) 
	click on numbers
	select from dropdown list 
	select one of many or many of many
	allow dropdown selection or "other"
* add internal mapping of scales (given range in questionnaire cp. internal range)
* add rich text editor for longer descriptive text
* allow references within the text. E.g.: latex-lile [Andrews2012]
* findings:
	add (parts-of) video-clips for findings (or several videos)
* interactive ordering/sorting of items (drag and drop "tasks" into position)
	allow the reports to be ordered with drag and drop (internal: change attribute order)
	allow the questions and answers "qanda" of an interview to be sorted
	allow sorting of (list of) heuristics
* prepare for iPad input (bigger buttons)
* add URM favicon
* for HE:
	manage heuristics (see Nielsen)
	manage heuristic issues (found per expert/reviewer)
	adjust naming for fields: alias name id 
	add section to manage "user profiles" (~personas?)
	section to manage text for "extend of Evaluation"? 
	allow to specify finding per heexpert with severity and reference to heuristic
* for staff members:
	allow assignment of (multiple?) "role(s)" (facilitator, interviewer,..)
* select the color for markers with RGB-chooser
* allow free-text to explain reference for a transcript event
* switch languages with a flag


== Feature - Reports

* special, and separate sections for TA Plan and TA filled-out-forms
* calculate some static values for many anwsers to a single question 
	XML+XSL calculate "Std. Deviation"
* findings export: xml export video-clips and documents for a finding
* xml-export: xml-export the roles of staff members: interviewer, observer,...
* xml-export: export person documents (if available)
* xml report the "list of heuristics"
* xml report of "heuristic issues"
	description, notice, direction, reproduce, severity, 
	found by (multiple persons), value,... codereference
* HTML - Report: adjust xslt for HE to show
	separate sections for biblio and "normal" appendix files
* thumb-nail like preview of whole rendered report 
	always on the page, always up-to-date

== Feature - Authentication and Authorisation

* roles (manager, scribe, evalutators) for HE
* roles (staff: facilitator, computer operator, 
		 logger/scribe, camera operator) for TA)
* authorisation (view and export) for clients (=users)


== Feature - Backup/Restore

* backup as xml
* restore by reading xml

== Information / Design / Usability / User Experience

* pretty look (optional skinning)
* concise and powerful entry forms
* drag and drop
* video preview with timestamp selection
* pretty xsl and css for exported Reports (HTML)
* add info about "overall project status" 
  	missing entries in %, data entered
	calculate statistics (successful tasks, time for task completion)
* use a triangle icon to toggle sections
* color or show hints for manatory fields (but do NOT enforce input)
* custom attributes for test users (persons)
	allow to specify attributes as "default" to be created with new users
	allow some more attributes added on demand (for each test user)
	format (styles!) input according to type of an custom attribute
		dropdown input, many of many check-boxes,...
	after "managing custom attributes" in extra view, reload main input form
* Taskcompletion should be much easier to enter (maybe via a table/matrix)	
* Answer-summary: pretty print answer with person and question details
* allow assignment of documents to a device for a reviewer
	(e.g. photo of an computer or room)	
* manage event-codes: auto-save on edit
* manage event-codes: arrange elements (it is not very pretty now)
* manage event-codes: reload report after changing/adding event codes
* finding/recommendations: 
	assign (multiple) video clipse
	optional assign already existing document to finding (drop down)
	allow the assignment of (multiple) code references for a finding
* manage roles for staff: : interviewer, observer,...
* assign (and upload) documents for a person (e.g. consent form)
* AJAX-ify and created "on current page" management of 
	custom attributes, event codes,...
* findings: add documents: show preview of new image
* code references: 
	allow to collapse section
	pretty arrange fields for code references
	allow to select lines from preview code (from git repo)
* add document within recommendation is "badly structured". 
	maybe we better indent "documents" a little
* documents: for HE do not show for dropdown "appears in section"
	the option "Materials for the test users"
* holistic formative evalutaion support
	guide the user to give them the the feeling of step-by-step support 
	from setup, configuration, to conducting, 
	collecting and revising data
	to reporting and exporting



== Performance

* increase speed for rendering first page
* check database index
* use local storage instead of cookies to store the toggle state 
	HTML5 local storage
* set up caching for "relativly static elements"
	EventCodes, PersonTypes and CustomAttributes,...
* check if equals <=> method in answer is performance "expensive"?
* create thumb index on the server on demand
* use thumb nails for small preview (documents of findings/recommendations)


== Softwaredevelopment

* add unit/function/integration tests: cucumber
* test generated XML against given XSD
* Upgrade to Rails 3.1.x on Ruby 1.9.x (use assets pipeline)
* add default values for every new data in the database
* add/check for Copyright / GPL notes within the code (each file)
* check deployment scripts (deploy.rb) for version of rails
	e.g. maybe we activate the asset-pipeline again
* setup startup values (to download from git and just run the Rails app)
 	e.g. in database by using "seed.rb"	
	
== Questions (things to decide)

* should a document be assigned (to fingings) AND the report itself??
	maybe we add documents to a finding
	and do NOT ask for section in which to appear?
* for custom attributes or dynamic questions, devicetypes,...: 
	where to define/set up multi-language questions (in the database?)
* for section HE
	add section to manage / to report "user profiles/personas"
	add section to manage / to report "extend of evaluation"
* for HE
	should we move section "discussion" AFTER the findings/recommendation section?
	
		
== Fix Known Bugs

* uploading: A part of the AJAX "update the local preview" 
	does not work with safari (works on firefox)?!
* check if method "toggle_div" in "projects_controller" is still in use?